// Author: Anna Carvalho
// date: 4/24/2022
//
// This program takes a user-inputted ASCII character and
// adds 1 to it. However, it does not handle caries, so it
// won't work for any ASCII character whose ternary 
// representation has a 2 in the 0th place (b, e, h, etc.).
//
// I used the following function to add two ternary numbers:
// Opr(Opr(Opr(X, C0), Opr(C2, Opr(Y, C0))), Opr(C2, X))
//
// Calculated in the following order:
// 1. Opr(C2, X)
// 2. Opr(Y, C0)
// 3. Opr(C2, Opr(Y, C0))
// 4. Opr(X, C0)
// 5. Opr(Opr(X, C0), Opr(C2, Opr(Y, C0)))
// 6. Opr(Opr(Opr(X, C0), Opr(C2, Opr(Y, C0))), Opr(C2, X))
// 
// Where X = user input and Y = 1.

.CODE
//Standard malbolge commands
MOVD:
	MovD/Nop
	Jmp

CRAZY:
	Opr/Nop
	Jmp

ROT:
	Rot/Nop
	Jmp

HALT:
	Hlt

OUT:
	Out/Nop
	Jmp

IN:
	In/Nop
	Jmp

// the following routines act as 'counters'.
COUNT:
	Nop/MovD
	Jmp

COUNT2:
	Nop/Nop/MovD/Nop
	Jmp

.DATA

// C1 = Opr(C2, input)
// C1 = Opr(Opr(Opr(input, C0), Opr(C2, Opr(1, C0))), Opr(C2, input)) on second run
STEP1_6:
	CRAZY C1
	COUNT CONT2_5	// hit on first run
	COUNT2 CONT10	// hit on third run
	COUNT CONT3	// hit on second run

// C0 = Opr(1, C0) in first run
// C0 = Opr(C2, Opr(1, C0)) on second run
// C0 = Opr(Opr(input, C0), Opr(C2, Opr(1, C0))) on third run
STEP2_3_5:
	CRAZY C0
	COUNT CONT4	// hit on first run
	COUNT2 CONT9	// hit on third run
	COUNT CONT5	// hit on second run

// C0 = Opr(input, C0)
STEP4:
	CRAZY C0
	COUNT CONT8

// C1 = input
STORE_INPUT:
	CRAZY C1
	COUNT CONT2	// hit on first run
	COUNT2 CONT7	// hit on third run
	COUNT CONT6	// hit on second run

GET_INPUT:
	IN ?-
	R_MOVD MOVD CONT1

// This section is responsible for the general "flow" of the program
ENTRY:
	MOVD GET_INPUT

CONT1:
	CRAZY C1 R_CRAZY	// prepare input to store
	R_COUNT
	R_MOVD MOVD STORE_INPUT

CONT2:
	R_CRAZY
	R_COUNT
	CRAZY C1 R_CRAZY	// prepare input to store
	R_MOVD MOVD STEP1_6

CONT2_5:
	ROT C2
	R_CRAZY
	R_MOVD MOVD STEP1_6

CONT3:
	R_COUNT2 R_COUNT2 R_COUNT2
	R_ROT ROT 3		// put 1 in A
	R_CRAZY
	R_COUNT
	R_MOVD MOVD STEP2_3_5

CONT4: 
	R_ROT ROT C2
	R_CRAZY	
	R_MOVD MOVD STEP2_3_5

CONT5:
	R_ROT ROT C2
	R_CRAZY
	R_MOVD MOVD STORE_INPUT	

CONT6:
	R_ROT ROT C2
	R_CRAZY
	R_MOVD MOVD STORE_INPUT

CONT7:
	R_CRAZY
	R_MOVD MOVD STEP4

CONT8:
	R_CRAZY
	R_COUNT2 R_COUNT2 R_COUNT2
	R_MOVD MOVD STEP2_3_5

CONT9:
	R_CRAZY
	R_COUNT
	R_COUNT2 R_COUNT2 R_COUNT2
	R_MOVD MOVD STEP1_6
	
CONT10:
	OUT ?-
	R_ROT ROT 30		//print newline after char
	R_OUT OUT ?-
	HALT
